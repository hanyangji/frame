package sunwou.mongo.util;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;

import sunwou.util.StringUtil;

/**
 * @author onepieces
 */
public class MongoUtil {
	
	
	  public static Map<String, Class> classes = new HashMap<String, Class>();
	  
	  
	  public static final String ENTITYBASE="mongoBaseEntity";


	  public static final String position = "position";

     
	  
	  static{
		  classes.put(ENTITYBASE, new MongoBaseEntity().getClass());
		
	  }
	  /**
	     * 返回query查询对象 mongo
	     * @param ob
	     * @throws IllegalAccessException 
	     * @throws IllegalArgumentException 
	     */
	    public static Query mongoutilQ(Object ob, String classname) {
	    	Query query=new Query();
	        Criteria c = new Criteria();
	        List<Criteria> param = new ArrayList<Criteria>();
	        Object value=null;
	        Class cl=classes.get(classname);
	        Class base=classes.get(ENTITYBASE);
	        //判断取的条件
	        for (Field f : base.getDeclaredFields()) {
	            f.setAccessible(true);
	                try {
						value = f.get(ob);
					} catch (IllegalArgumentException | IllegalAccessException e) {
						value=null;
					}
	                if (check(value)){
	                	if(f.getName().equals("sunwouId"))
	                      param.add(Criteria.where("_id").is(value));
	                	else if(f.getName().equals("fields"))
	                	{
	                		//设置取哪些属性
	        	        	String[] fields=value.toString().split(",");
	        	        	for(String temp:fields)
	        	        	{
	        	        		query.fields().include(temp);
	        	        	}
	                	}
	                	else
	                	  param.add(Criteria.where(f.getName()).is(value));
	                }
	        }
	        for (Field f : cl.getDeclaredFields()) {
	            f.setAccessible(true);
	                try {
						value = f.get(ob);
					} catch (IllegalArgumentException | IllegalAccessException e) {
						value=null;
					}
	                if (check(value)){
	               param.add(Criteria.where(f.getName()).is(value));
	                }
	        }
	        if (param.size() > 0){
	            c.andOperator(param.toArray(new Criteria[param.size()]));
	        }
	        //添加条件
	        query.addCriteria(c);
	        return query;
	    }

	    /**
	     * 返回update查询对象 mongo
	     * @param ob
	     * @throws IllegalAccessException 
	     * @throws IllegalArgumentException 
	     */
	    public static Update mongoutilU(Object ob, String classname)  {
	        Update update = new Update();
	        Object value=null;
	        Class cl=classes.get(classname);
	        Class base=classes.get(ENTITYBASE);
	        for (Field f : base.getDeclaredFields()) {
	            f.setAccessible(true);
	                try {
						value = f.get(ob);
					} catch (IllegalArgumentException | IllegalAccessException e) {
						value=null;
					}
	                if (check(value)){
		                update.set(f.getName(), value);
		                }
	        }
	        for (Field f : cl.getDeclaredFields()) {
	        		f.setAccessible(true);
	                try {
						value = f.get(ob);
					} catch (IllegalArgumentException | IllegalAccessException e) {
						value=null;
					}
	                if (check(value)){
	                update.set(f.getName(), value);
	                }
	        }
	        return update;
	    }
	    
	    public static boolean check(Object value){
	    	if(value==null)
	    		return false;
	    	if(value instanceof String)
	    		if(!StringUtil.isEmpty(value.toString()))
	    			return true;
	    		else
	    			return false;
	    	else
	    		return true;
	    }
	    
}
