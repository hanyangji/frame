package sunwou.mongo.util;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Component;

import sunwou.util.TimeUtil;

/**
 * 
 * @author onepieces
 * mongodb数据库操作类的父类
 * 定义了所有类的公共属性
 * 实现了所有数据的增删改查的基础方法
 * @param <T>
 */
@Component("mongoBaseDao")
public class MongoBaseDaoImple<T extends MongoBaseEntity> implements MongoBaseDao<T>{
	
	@Autowired
	public  MongoTemplate mongoTemplate;
	
	//默认从0开始取
	private static final int MIN_COUNT=0;
	//默认取的条数
	private static final int MAX_COUNT=10000;
	
	/**
	 * 增加记录的方法
	 * @param add
	 * @return  返回唯一ID
	 */
	public String add(T add)
	{
		String time=TimeUtil.sdfCommon.format(new Date());
		add.setCreateTime(time);
		add.setCreateDate(time.substring(0, 10));
		mongoTemplate.save(add);
		return add.getSunwouId();
	}

	/**
	 * 根据实体类的属性来查询
	 * @param queryo
	 * @param skip 从第skip条数据开始
	 * @param limit 取limit条数据  
	 * @return  返回查询结果
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 */
	public List<T> find(T queryo,Integer skip,Integer limit,String className) 
	{
			Query query;
						if(skip!=null&&limit!=null)
						query = MongoUtil.mongoutilQ(queryo, className).skip(skip).limit(limit);
						else
						query = MongoUtil.mongoutilQ(queryo, className);
			return (List<T>) mongoTemplate.find(query.with(new Sort(Direction.DESC, "sort")),MongoUtil.classes.get(className),className);
	}
	
	
	/**
	 * 获取数据量的总数
	 * @param queryo
	 * @return
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 */
	public int count(T queryo,String className)
	{
			   Query query;
				query = MongoUtil.mongoutilQ(queryo, className);
				return  (int)mongoTemplate.count(query, className);
	}
	
	
	/**
	 * 更新一条数据
	 * @param queryo
	 * @param updateo
	 * @return  更新数量
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 */
	public int update(T queryo,T updateo,String className)
	{
		Query query;
			query = MongoUtil.mongoutilQ(queryo, className);
			updateo.setLastUpdateTime(TimeUtil.sdfCommon.format(new Date()));
			Update update=MongoUtil.mongoutilU(updateo, className);
			return mongoTemplate.updateMulti(query, update, className).getN();
	}
	
	
	/**
	 * 删除一条数据
	 * @param queryo
	 * @return 删除数量
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 */
	public int remove(T queryo,String className)
	{
		Query query;
			query = MongoUtil.mongoutilQ(queryo, className);
			Update update=new Update();
			update.set("isDelete", true);
			update.set("deleteTime", TimeUtil.sdfCommon.format(new Date()));
			return mongoTemplate.updateMulti(query, update, className).getN();
	}

	@Override
	public T findById(String id,String className) {
		Criteria c=new Criteria();
		c.andOperator(Criteria.where("_id").is(id),Criteria.where("isDelete").is(false));
		List<MongoBaseEntity> rs=mongoTemplate.find(new Query(c).limit(1), MongoUtil.classes.get(className));
		if(rs.size()==0)
		return  null;
		else
		return (T) rs.get(0);
	}

	@Override
	public MongoTemplate getMongoTemplate() {
		return this.mongoTemplate;
	}


	
}
